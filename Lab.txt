Lab 6 - Write new Lab2.java 
	Thread Deposit {increase balance by 100}
	Thread Widraw  {decrease balance by 100}
	class Account { name, balance}
	class Account {
	private String name;
	private int balance;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getBalance() {
		return balance;
	}
	public void setBalance(int balance) {
		this.balance = balance;
	}
	@Override
	public String toString() {
		return "Account [name=" + name + ", balance=" + balance + "]";
	}
	
}
class Deposit extends Thread{
private Account acc;

public Deposit(Account acc) {
	super();
	this.acc = acc;
}
@Override
	public void run() {
		for (int i = 1;i <= 10;i++){
			int bal = this.acc.getBalance();
			bal+=100;
			this.acc.setBalance(bal);
			System.out.println("Deposit, current i =  " +  i + ", current balance = " + this.acc.getBalance());
		}
	}
}	
class Widraw extends Thread{
	private Account acc;

	public Widraw(Account acc) {
		super();
		this.acc = acc;
	}
	@Override
		public void run() {
			for (int i = 1;i <= 10;i++){
				int bal = this.acc.getBalance();
				bal-=100;
				this.acc.setBalance(bal);
				System.out.println("Widraw, current i =  " +  i + ", current balance = " + this.acc.getBalance());
			}
		}	
}		
public class Lab2_waitnotify {

	public static void main(String[] args) {
	Account acc = new Account();
	 Deposit d = new Deposit(acc);
	 Widraw w = new Widraw(acc);
	 d.start();
	 w.start();

	}

}
-------------------------------------------
Lab 5 -  run (Lab1.java), take thread dump, observe  BLOCKED (on object monitor) and locked <0x00000000d5f561d8> (a java.util.ArrayList)

-------------------------------------------
Lab 4 - stop current thread execution till t1 gets over
try {
		t1.join();
	} catch (InterruptedException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	System.out.println("end of  main  after completing t1 ");
	
}
-------------------------------------------
Lab 3 - Lab5Support -> Random sleep 
Write a main method to create and start 3 thread, need to display which thread is closed first

class Lab5Support extends Thread
{
	static String finalloc;
	static boolean contflag=true;
	private String str;
	
public Lab5Support(String str) {
		super();
		this.str = str;
	}

@Override
public void run() {
	for (int i = 0;i<10 && contflag==true;i++){
		System.out.print(str);
		try { Thread.sleep((int)(Math.random()*100)); 	} catch (InterruptedException e) { 		e.printStackTrace(); 		}
	}
	if (contflag == true){
	System.out.println("\n"+ Thread.currentThread().getName() + " over and selected destination");
	finalloc = Thread.currentThread().getName();
	contflag = false;
	}
}	
}
-------------
class Lab5Support extends Thread
{
	private String str;
	
public Lab5Support(String str) {
		super();
		this.str = str;
	}

@Override
public void run() {
	for (int i = 0;i<20;i++){
		System.out.print(str);
		try { Thread.sleep((int)(Math.random()*1000)); 	} catch (InterruptedException e) { 		e.printStackTrace(); 		}
	}
}	
}
---------------------------------
Lab 2 - Create a new class to observe time slicing
class Lab4Support extends Thread
{
	private String str;
	
public Lab4Support(String str) {
		super();
		this.str = str;
	}

@Override
public void run() {
	for (int i = 0;i<1000;i++){
		System.out.print(str);
		if (i%100==0)
			System.out.println();
	}
}	

Write a main method -> create 3/5 threads and see timeslicing
	change 1000 to 100000-> visualvm to see timeslicing
	
	


Lab 1- Create a new java project -> demo1
Create 3 files -> Lab1 -> create a thread with extends Thread
                  Lab2 -> create a thread with implements Runnable
                  Lab3 -> Create a thread with lambda expression
  -----------import java.util.Scanner;

class Lab1Support extends Thread
{
@Override
public void run() {
	for (int i = 0;i<10;i++){
		System.out.println("For - " + i +  " in thread " + Thread.currentThread().getName());
	}
}	
}
public class Lab1 {

	
	public static void main(String[] args) {
		System.out.println("Press a number to continue");
		Scanner scanner = new Scanner(System.in);
		scanner.nextInt();
		Lab1Support lab1 = new Lab1Support();
		lab1.start();
		System.out.println("after starting the thread");

	}
}
--------------
import java.util.Scanner;

class Lab2Support implements Runnable
{
@Override
public void run() {
	for (int i = 0;i<10;i++){
		System.out.println("For - " + i +  " in thread " + Thread.currentThread().getName());
	}
}	
}
public class Lab2 {

	
	public static void main(String[] args) {
		System.out.println("Press a number to continue");
		Scanner scanner = new Scanner(System.in);
		scanner.nextInt();
		Thread t1 = new Thread(new Lab2Support());
		t1.start();
		
		System.out.println("after starting the thread");

	}
}
------------
import java.util.Scanner;

public class Lab3 {
	
	public static void main(String[] args) {
		System.out.println("Press a number to continue");
		Scanner scanner = new Scanner(System.in);
		scanner.nextInt();
		Runnable runnable = ()->{	for (int i = 0;i<10;i++){
			System.out.println("For - " + i +  " in thread " + Thread.currentThread().getName());
		}};
		
		Thread t1 = new Thread(runnable);
		t1.start();
		
		System.out.println("after starting the thread");

	}
}
